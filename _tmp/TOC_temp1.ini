TOC

개요
아키텍처
솔루션 개요 및 버전
개발 권한 - IAM 사용 권한 신청
설치
Runtime - JRE
JDK 설치
JAVA_HOME 환경변수, PATH 설정
IDE - SpringToolSuite
WebSquare (BO UI)
Vue.js (FO UI)
Tyk API gateway ( Tech 팀에서 API 등록)
Nexus 
개발 SDK (ec-core.jar)
Swagger ( API 개발 )
AWS profile / CLI
AWS Toolkit
Codecommit
DynamoDB
RDB connection (ReadOnly replica 포함)
Lombok
SonaQube
RabbitMQ
endpoint 정보
개발표준
코딩가이드
Java
WebSquare
Python
개발프로세스
서비스 명명
패키지설계
REST API
단위 테스트
의존라이브러리
명명법
로깅/Elastic Search/Kibana
개발 프레임웤 (ec-core.jar)
리소스 접근 권한 - 인증 키 관리
예외처리
데이타베이스
캐싱 서비스- REDIS
비동기 서비스 - RabbitMQ
REST 서비스
스트리밍 서비스 - Kafka, WSO2
검색 서비스 - Elastic Search
파일 서비스 - S3
유틸리티
보안 - encryption / decryption
로깅 (logback)
SCM
Repository - Codecommit
배포
개발 배포 프로세스 
 CICD
Jenkins
배포 스크립트
Dockering / EKS


0.7	2019-05-20	초안 작성	조정학	조정학
0.8	2019-05-23	수행사 모듈PL 1차 검토	조정학	손지훈
0.9	2019-05-30	롯데e커머스 모듈PL 2차 검토	조정학	김승철












1. 개요
   a. 아키텍처 
본 문서에서는 개발에 필요한 하기 기술들의 개요 및 설치 및 설정 방법에 대해 기술합니다. 각 솔루션에 대한 버전은 문서 후반부에 따로 명기하였습니다.

다음은 프로젝트에서 사용되는 기술의 도안 ( Technical Stack ) 입니다.



마이크로 서비스 형태


1) FO (Front Office) - S3 정적 자원으로 서비스 가능, 예) MyPage
고객에게 오픈되는 대 다수의 정적 자원 ( HTML, JSON, XML 등) 은 AWS S3에서 서비스됩니다. 이 경우 클라이언트 측(예 My Page) 에서 동적 컨텐츠를 위해 호출하는 경로는 Backend API 호출을 통해서 입니다.

Vue.js 를 통해 API 호출 후 리턴되는 JSON 모델로 결과 화면을 구성합니다.

2) FO (Font Office) - Naver 등의 검색 엔진에 노출되어야 하는 서비스, 예)상품상세
웹 검색 엔진에 노출되어야 하는 서비스는 서버 사이드 렌더링이 필요합니다. Naver의 경우 HTML 의 meta 태그를 통해 정보가 노출되어야 하는데 상품 검색의 경우, 메타 태그가 동적으로 구성되어야 하는 경우가 있습니다.

상품명의 경우 상품코드로 부터 값을 읽어와 메타 정보를 구성을 해주어야 하는데 서버 사이드 렌드링을 위해 WAS를 경유해야 하는 필요가 생깁니다. 

3) BFF (Backend For Front) - WAS 기반 서브 사이드 렌더링이 필요한 서비스, 예)주문서
주문서의 경우 보안 등의 이유로 FO의 static 리소스로 처리하지 않고 JSP 등을 활용한 서버 사이드 렌더링을 통한 서비스가 제공됩니다.

4) BO (Back Office) - WAS 기반 정적 HTML 서비스, 클라이언트 측 렌더링이 필요한 WebSquare 기반
RIA 솔루션인 WebSquare의 경우 Tomcat 등의 WAS 에 의존하여 기동됩니다. BO 에는 WebSquare로 구현된 정적 리소스 (UI, xml, text file 등) 를 배치합니다. Database와 연동이 필요한 비즈니스는 모두 API 를 통해 서비스 받습니다.

주문서 관리 모듈 등은 보안을 위해 서버측 렌드링이 반드시 필요한 경우 입니다.

5) SO BFF (Seller Office BFF)  - 보안 이슈로 Proxy 처럼 활용
OpenApI 나 SO (Seller Office)의 경우 외부 시스템에서 직접적으로 BO를 호출하지 않고 각자의 BO 모듈을 경유해서 타 BO 서비스를 호출 합니다. 비즈니스 로직은 가질 수 없으며 조회 용일 경우 타 마이크로 서비스의 REST API를 

호출하거나, 갱신/삽입/삭제 등의 오퍼레이션은 MQ를 통해 비동기 호출로 이루어 져야 합니다. SO의 경우 클라이언트에 의해 REST API 를 매크로 처리하여 벌크로 호출하는 경우가 많으므로 REST API 호출은 비권장 사항입니다.

SO 의 경우 SO만을 위한 UI 가 존재할 수 있으나, Open API 는 순전히 외부에서 들어오는 URL request에 대한 포워딩만 처리합니다.

6) MQ - 마이크로 서비스 간 호출은 MQ가 기본
각 마이크로 서비스는 자신의 서비스를 외부로 노출할 경우 적어도 하나의 Message Queue를 가지고 있어야 합니다. 타 마이크로 서비스는 MQ를 통해 서비스를 요청하고, 본 마이크로 서비스는 비동기 방식으로 요청에 대한 응신을 합니다.

2019. 6. 4  현재 MSA 간 읽기성 호출은 REST API 사용을 허용하고, 갱신/삭제 등의 오퍼레이션은 반드시 MQ를 사용하기로 기준이 잡혀 있습니다.

7) Kafka - 로그 등 대량의 데이타를 원하는 데이타 Sink로 전송
Kafka는 대량의 데이타를 원하는 목적지로 전송 가능하도록 서비스 합니다. WSO2에 의해 목적지가 정해지며 개발팀에서는 목적지 정보를 명기하고 Kafka 로 전송합니다. 구체적인 활용방안에 대해서 Tech 팀에 문의하시기 바랍니다.

8) REDIS - 빠른 결과를 위한 캐싱 지원
빠른 응답 속도가 필수인 경우가 있다면 키-값 구조의 데이타 저장소인 REDIS 사용을 할 수 있습니다.

9) Proxy - 요청 리다이렉팅 및 캐싱 지원
proxy 서버로 STON을 사용합니다. 

10) API Gateway - API 트래픽 모니터링 및 관리
AWS API Gateway를 대신하여 Tyk를 사용하고 있습니다. 

   b. 솔루션 개요 및 버전
프로젝트에서 사용하는 솔루션 현황은 아래 링크에 연결된 문서에서 확인할 수 있습니다.

◆ 통합EC구축 - 솔루션현황 ◆

개발 과정에서 필요한 솔루션이 구동되도록 환경을 구성하는 방식에 대해 설명하겠습니다.

Windows 10 기준으로 작성되었습니다. JDK 등 실행 환경에 따로 조정이 되어야 하는 솔루션이 있습니다.

Solution의 Link를 누르면 설치파일을 내려 받을 수 있습니다.

Runtime	OpenJdk	
OpenJDK8u-x64_windows_8u212b03

Java 개발툴킷
IDE	Spring Tool Suite 4	
Version: 4.2.1.RELEASE



통합개발환경

https://spring.io/tools 로 이동하여 해당 버전을 내려받습니다.

User Interface	WebSquare	5.0_3.3487B.20190213.175059_1.5	업체명:인스웨이브. Text 기반 RICH Client  
MSA	Spring boot	2.1.4.RELEASE	MSA 개발 프레임웤
MSA	Tomcat	Apache Tomcat/9.0.17	Spring boot 내장 Tomcat Web Server
API gateway	Tyk	Tyk Dashboard ver 1.8.0	API 게이트웨이
Repository	Nexus	
Sonatype Nexus Repository Manager

OSS 3.16.1-02

Artifact 저장소
Repository	Jenkins	Jenkins ver. 2.164.3	배포자동화 도구
Source Quality	Sonaqube	6.5	소스 품질 확인 도구
MSA	Swagger	2.0	API 설계 도구
Dev Tool	Lombok	1.18.1	개발 생산성 향상 도구




   c) 개발 권한 신청
      개발자는 다음의 JIRA 메뉴로 이동하여 AWS 클라우드의 자원 ( Codecommit, EC2, S3, Aurora/DynamoDB 등) 을 사용할수 있는 IAM 권한을 신청합니다.

PIUM(JIRA) 게시판 위치
JIRA → 프로젝트 → 통합EC_XA
URL : https://pium.lotte.com/secure/RapidBoard.jspa?rapidView=206&projectKey=ECXA


      1)  AMAZON Console 계정 신청합니다.

DEV 계정 : lec-aws-7ottedev  //계정명
AWS Console ID : xxxx  // AWS 콘솔 로그인 아이디
AWS Console P@D: **** // AWS 콘솔 로그인  패스워드
       자신의 역할과 콘솔 Acces key, password를 받습니다.

DEV 역할 : Dev-xxx  // 역할
DEV Access key : xxxx //AWS 접근 키
DEV Secret Access Key :  **** //AWS 접근 패스워드
      코드 커밋 소스 접근 권한용 계정을 부여 받습니다.

Git ID: xxxx // GIT 아이디
Git P@D: **** // GIT 패스워드

       2) AMAZON 콘솔 로그인합니다.

       아마존 웹서비스 URL :  https://lec-aws-7ottemgmt.signin.aws.amazon.com/console



      3) 내 보안 자격 - MFA 디바이스 관리로 들어갑니다.



      4) 스마트폰으로 구글 OTP 애플리케이션을 다운로드 받아 화면의 QR 코드를 스캔합니다.



구글 OTP의 6자리 숫자를 띄움없이 입력합니다.

잠시 기다렸다가 OTP 숫자가 업데이트 되면 아래 칸에 추가로 입력합니다.



       5) 로그 아웃 후 재로그인 합니다. 아래 창이 뜨면 구글 OTP의 숫자를 입력합니다.



       6)  역할변경을 합니다. (우측 상단 자신의 아이디 우측의 화살표를 눌러 역할 변환 메뉴를 선택합니다.)



        계정은 DEV 계정인 lec-aws-7ottedev 를 입력합니다. 

        역할은 자신의 역할 Alias 를 입력합니다. 아래 CA 가이드 문서를 참조하여 자신의 역할을 확인하세요

       CA 가이드 = >   https://eium.lotte.com/pages/viewpage.action?pageId=77484789

     역할 변경이 되면 DEV 환경으로 전환됩니다. 역할 전환 전이 Common 환경입니다.

     %%% Tech팀 업무 요청 가이드는 다음 위치에서 확인할 수 있습니다.

https://eium.lotte.com/pages/viewpage.action?pageId=85469127

2. 설치
   a. Runtime - JRE
      i. OpenJDK 설치

압축 파일을 내려 받은 후 원하는 위치에 압축을 해제합니다. ex) openjdk-8u212-b03
JAVA_HOME 환경변수, PATH 설정
Windows 10 의 좌측하단 검색입력 난에 환경변수라고 입력하여 환경 변수 창을 띄웁니다.






OpenJDK 설치 디렉토리명 JAVA_HOME 변수이름 및 변수값 입력  
          ex)  JAVA_HOME : c:\openjdk-8u212-b03

OpenJDK 실행 파일 위치 Path 변수에 입력 
          ex)  Path : c:\openjdk-8u212-b03\bin; 

   b) IDE - SpringToolSuite
https://spring.io/tools 에서 내려받은 압축파일을 해제합니다.

ex) C:\sts-4.2.1.RELEASE

   c) WebSquare ( BFF UI )
유의사항

WebSqure에 대한 기술 문의는 솔루션 업체인 인스웨이브 담당자가 프로젝트 기간 내 상주하며 지원 업무를 진행합니다.

화면 디자인과 개발을 위한 도구는 분리되어 있습니다. 화면 디자인을 위한 WebSquare Studio 설치 문의는 해당 담당자에게 문의하시기 바랍니다.

프로젝트 생성은 아래 codecommit소스를 내려 받아 구성하도록 합니다.

https://git-codecommit.ap-northeast-2.amazonaws.com/v1/repos/bosample-ui

디자인 도구와 개발 도구와의 소스 동기화 처리는 아래 문서를 참고하시기 바랍니다.





        아래의 공유폴더로 이동하여 로컬 머쉰으로 파일들을 복사해 옵니다.     

    i) WebSquare 샘플 프로젝트 다운로드

공유폴더

\\gaia.lotte.com\prj-ec$\통합 EC 구축 프로젝트\통합EC개발담당\03. Tech팀\AA\WebSquareSpringBoot.zip

\\gaia.lotte.com\prj-ec$\통합 EC 구축 프로젝트\통합EC개발담당\03. Tech팀\AA\websquare_5.0_3.3487B.20190213.175059_1.5.jar



      ii) WebSquare 샘플 프로젝트 임포트

          WebSquareSpringBoot.zip 파일을 압축해제하고 Existing Maven Projects 로 import 합니다.

          ex) C:\workspace\WebSquareSpringBoot

          websquare_5.0_3.3487B.20190213.175059_1.5.jar 파일은 향후 Nexus 에 등록하여 자동으로 내려받게 할 예정입니다. 임시로 로컬 폴더에 저장하도록 합니다.

          ex) C:\Temp\websquare_5.0_3.3487B.20190213.175059_1.5.jar

         임포트 된 프로젝트 내의 pom.xml 파일을 열어 아래처럼 websquare 라이브러리의 경로를 입력합니다.

POM
<dependency>
  <groupId>websquare</groupId>
  <artifactId>websquare</artifactId>
  <version>5.0_3.3487B.20190213.175059_1.5</version>
  <scope>system</scope>
  <systemPath>C:\Temp\websquare_5.0_3.3487B.20190213.175059_1.5.jar</systemPath>
 </dependency>


      iii) 실행

          의존 라이브러리 설치를 위해 pom.xml 을 이용(pom.xml을 선택하고 띄운 팝업의 Run As 메뉴하에 위치)해 POM install 명령을 수행합니다.



           Run Configuration / Spring Boot App 에서 Main type으로  com.inswave.sample.WebSquareSpringBootApplication 로 입력합니다.



       Arguments 탭에서 VM agruments 값으로 자신이 설치한 WebSquare Home 경로를 입력합니다.

      ex) -DWEBSQUARE_HOME=C:\workspace\WebSquareSpringBoot\websquare_home



실행하여 아래 콘솔 로그를 확인하세요

 원본 펼치기


브라우저에서 실행하여 다음처럼 보이면 성공입니다.



    d) Vue.js ( FO UI )
         Vue.js 의 UI 디자인은 디자인팀이 맡습니다.

         동적 컨텐츠 처리는 개발 2팀에서 인터페이스 정의서를  작성한후 API 개발팀에 전달합니다.

         API 개발팀은 인터페이스 정의서에 표현된 데이타 포맷이 표준과 일치하는 지 확인 한 후 틀린 부분을 수정한 후 API 개발을 진행합니다.

         - 데이타 (필드명) 표준은 사내에서 사용하는 메타 관리 시스템(DA 팀 문의 필요)을 활용합니다.

         - API URL은 표준형식으로 작성합니다.   

         수정된 인터페이스 정의서 내용 및 URL 은 개발 2팀으로 전달하여 frontend의 데이타 구조와 backend 의 데이타 구조를 동기화 시킵니다.

         S3 에 HTML/JSON 형태의 텍스트 기반 클라이언트가 위치하게 되며, 런타임 환경은 구성하지 않습니다.

    e) Tyk API gateway 
         i) Tyk 콘솔 접속

         Tyk 는 API 의 활동정보를 모니터링합니다. API 의 라이프싸이클(설계, 공개, 인증, 모니터, 최적화)을 관리하고, API가 어떤식으로 소비되는지에 대한 실행가능한 정보를 제공합니다.

         API 설계자/API 개발자가 SWAGGER 로 API 스펙을 생성/구현하고, Swagger UI에서 Json파일로 export하여 Tech팀에게 요청하면 API는 Tyk에 임포트되어 개발자에게 사용가능한 API 형태로 공개됩니다. 

         개발자는 DEV 환경에서 타인에게 자신의 로컬에서 서비스하는 API를 공개할 수 있습니다. API 등록은 Tech 팀에게 요청하여야 합니다.

         아래 링크에 연결된 문서에서 API Gateway에 연결하는 Endpoint가 제공됩니다.

01. 인프라 정보

        ii) Tyk API 등록 (  개발팀에서는 API 등록 요청을 지라를 통해 Tech팀에 요청 )   

PIUM(JIRA) 게시판 위치
JIRA → 프로젝트 → 통합EC_XA
URL : https://pium.lotte.com/secure/RapidBoard.jspa?rapidView=206&projectKey=ECXA

           개발자 환경에서 접근할 수 있는 Tyk 서버 명은 'Local bff'  이며, http://10.118.242.135:3000 이 콘솔 URL 입니다.



          아래 Tyk에 API 등록하는 과정은 Tech 팀에 의해 진행됩니다.

          다음은 개발자 머쉰에서 실행되고 있는 /hello REST API를 Tyk에 등록하는 과정을 설명합니다.

          좌측 API 메뉴 선택 후 우측 상단 ADD NEW API 버튼을 누릅니다.



         상세 화면에서 아래 정보를 기입합니다.

API Name : hello
Target URL: http://{개발자 자신의 IP}/hello
Authentication mode: Open(Keyless) *


아래와 같은 에러 메시지가 뜬다면, 방화벽에 의해 접속이 막힌 상태입니다.  

//방화벽에 의해 막혔을 경우
{
    "error": "There was a problem proxying the request"
}
 
 
//API 를 찾을 수 없을 경우
{
    "error": "Authorization field missing"
}
         Tyk에 등록하기 위해 요청되는 API 는 YML/Json에 명기된 host 값에 따라 목적지가 개발자 로컬 머쉰이 될 수 도 있고,  팀에서 관리하여 공유 서버가 될 수 있습니다.

    f) Nexus
          i) Nexus 콘솔

         프로젝트가 빌드된 후 생성되는 artifact 중 모든 MSA가 공유해야할 라이브러리는 Nexus ( http://10.194.91.251:8081/#browse/browse ) 에 등록하여 관리합니다. 

         ec-core.jar 는 모든 MSA가 POM에 등록하여 Tech팀의 업데이트 통지에 따라 최신 버전을 받아 내려야 합니다.

         업무 모듈 별로 사용하는 라이브러리가 있을 경우 Tech 팀에 요청하여 등록할 수 있습니다. 공통 개발팀의 라이브러리가 여기에 해당합니다.

         이 경우 Tech 팀에서는 요청팀에게 라이브러리의 Codecommit 소스 위치를 전달 받아 팀별로 Jenkins 빌드 하는 시점에 해당 라이브러리를 함께 빌드하여 자동으로 Nexus에 올려집니다.



           ii) Nexus repository POM 등록

아래의 com.xlotte.maven 는 본 프로젝트를 위해 구성된 Repository입니다. 
<repositories>
        <repository>
            <id>com.lotteon.maven</id>
            <name>lotte EC maven</name>
            <url>http://10.194.91.251:8081/repository/maven-public/</url>
            <releases>
                <enabled>true</enabled>
                <updatePolicy>always</updatePolicy>
            </releases>
        </repository>
</repositories>

    g) 개발 SDK (ec-core.jar)
          본 프로젝트의 모든 MSA 에서 참조해야할 공통 라이브러리입니다.          



ec-core.jar 는 com/lotteon/ec/ec-core/0.0.1/0.0.7.SNAPSHOT 경로에 위치하고 있고 POM 에는 아래와 같이 참조하게 됩니다.

<dependency>
    <groupId>com.lotteon.ec</groupId>
    <artifactId>ec-core</artifactId>
    <version>0.0.7-SNAPSHOT</version>
</dependency>
개발 단계에서는 위처럼 SNAPSHOT 으로 항상 최신 버전의 ec-core가 내려받아 지도록 처리되었으나, STAGING 단계에서는 아래 처럼 버전을 명기한 RELEASE 버전이 배포될 예정입니다.
<dependency>
    <groupId>com.lotteon.ec</groupId>
    <artifactId>ec-core</artifactId>
    <version>0.0.5.RELEASE</version>
</dependency>
    h) Swagger ( API 개발자 )
           Swagger UI 는 API 설계 도구 입니다. API 설계자는 http://10.194.91.14/ 로 접근해서 Swagger Editor로 API 를 설계할 수 있습니다.



        최초 접속할 경우 사이트에서 제공하는 Sample 이 조회됩니다.  File 메뉴 하부의 Clear editor 메뉴를 선택하면 빈화면으로 정리됩니다. 아래 파일을 import하여 위 화면의 내용을 확인해 보시기 바랍니다.

swagger_sample_20190520.yaml

      파일 포맷은 YML 형태이며 파일을 편집하면 오른쪽 웹페이지가 바로 갱신됩니다. 설계자가 완료한 API 설계 문서를 export한 후 개발자에게 전달하면 개발자는 import하여 API 명세를 보며 개발을 진행합니다.

      개발되는 API 는 API Gateway에 등록하여야 합니다. 관련 절차는 다음과 같습니다.



      1) 설계자(또는 개발자)는 개발/리뷰가 끝난 API 목록 YML 파일을 Json 으로 변경한 후 export 합니다.

      2) 설계자(또는 개발자) 는 export 된 Json파일을 Jira를 통해 Tech 팀에게 Tyk 등록 요청을 합니다.

      3) Tech 팀은 Json파일을 Tyk에 import 하여 신규 API를 생성하고 공개합니다.

      4) 개발팀은 API 게이트에서 공개된 API 가 제대로 작동하는 지 확인합니다.



    i) AWS  profile / CLI
         CA로 부터 부여 받은 AWS 키 정보를 C:\Users\{사용자계정}\.aws\credentials 파일에 기입합니다.

[default]
aws_access_key_id=AKIAX4572V5E** <= CA 로 부터 부여받은 아이디
aws_secret_access_key=***** <= CA로 부터 부여받은 패스워드
AWS CLI (Command Line Interface) 가 필요한 분은 아래 정보를 참조합니다.

다음 위치로 이동하여 MSI 설치 관리자로  AWS CLI 를 설치합니다.

https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/install-windows.html#awscli-install-windows-path

설치 후 구성 정보를 입력합니다.

// CLI 버전 확인
C:\Users\사용자아이디>aws --version
aws-cli/1.16.161 Python/3.6.0 Windows/10 botocore/1.12.151
 
 
//CLI 연결 정보 구성. ap-northeast-2 는 서울 리전 코드 입니다. output format의 JSON 은 디폴트 값이기 때문에 생략하여도 무방합니다.
C:\Users\사용자아이디>aws configure
AWS Access Key ID [None]: AKIAX4572V5EWFIEECMM
AWS Secret Access Key [None]: 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
Default region name [ap-northeast-2]: ap-northeast-2
Default output format [None]: json


     j) AWS Toolkit
Eclipse 에서 Install New Software... 메뉴를 선택하면 아래의 설치 창이 뜹니다. Work with 에 https://aws.amazon.com/eclipse 를 입력하고 Add 버튼을 선택합니다.

대상을 아래처럼 선택하여 설치합니다.





Cannot complete the install because one or more required items could not be found.
Software currently installed: Amazon RDS Management 1.0.0.v201807201743 (com.amazonaws.eclipse.rds.feature.feature.group 1.0.0.v201807201743)
Missing requirement: Amazon Relational Database Service (RDS) Plugin 1.0.0.v201807201743 (com.amazonaws.eclipse.rds 1.0.0.v201807201743) requires 'osgi.bundle; org.eclipse.datatools.connectivity.ui.dse 1.1.0' but it could not be found
Cannot satisfy dependency:
From: Amazon RDS Management 1.0.0.v201807201743 (com.amazonaws.eclipse.rds.feature.feature.group 1.0.0.v201807201743)
To: org.eclipse.equinox.p2.iu; com.amazonaws.eclipse.rds [1.0.0.v201807201743,1.0.0.v201807201743]



위 오류 사항이 날 경우 아래 처럼 Database Development 부분을 설치 진행 한 후 진행하도록 합니다.







설치가 진행되면 이클립스가 리부팅되고 아래의 창이 나타납니다. 자신의 Access Key ID 와 Secret Access Key를 입력합니다.

(이미 CLI를 통해 Access Key가 입력되었을 경우 입력창은 나타나지 않습니다.)





    k) Codecommit
common 환경의 서울 Region 내 Repository 에서 모든 환경의 소스가 관리됩니다. 





아래 링크에 Codecommit 명명 규칙에 대한 문서가 연결되어 있습니다.

15. CodeCommit 정책
원격 코드 저장소(AWS CodeCommit)


    l) DynamoDB
            DynamoDB의 엔드포인트의 기본 정책은 VPC 내 모든 사용자의 접근을 허용합니다. AWS explorer를 통해 생성된 테이블 목록을 확인할 수 있습니다.



    m) RDB connection
             Aurora 나 mariadb를 사용할 경우 MySQL 워크벤치를 다운로드 받아 설치합니다.

https://www.mysql.com/downloads/



            DEV 환경에 RDB 가 설치되면 환경 구성 방식에 대해 업데이트 할 예정입니다.



             코드 상으로 데이타베이스를 활용하는 방법에 대해서는 ec-core 프레임웤 가이드를 참고하시면 됩니다.

     n) lombok
               POM 추가 

<dependency>
  <groupId>org.projectlombok</groupId>
  <artifactId>lombok</artifactId>
  <version>1.18.8</version>
</dependency>


 lombok artifact가 저장된 repository 위치로 가서 java jar lombok1.18.8.jar 명령을 실행합니다.



Specify location 버튼을 누른 후 STS 실행 파일을 선택합니다.



            Install / Update 버튼을 누르고 설치합니다.           

           설치 확인 창을 닫으시고 lombok-1.18.8.jar 파일을 STS 내의 Java Build Path에 추가합니다.

           테스트 용 모델을 하나 만들고, @Data 어노테이션을 붙였을 때 소스 변형없이 Getter, Setter 가 생성되어 있음을 확인할 수 있으면 정상 작동입니다.



     n) SonaQube
           하기 링크 연결 문서를 참고하시기 바랍니다.

SonarQube 설치

     o) RabbitMQ
            타 마이크로 서비스의 API를 호출할 경우, MQ를 통한 비동기 호출로 처리해야 합니다. 

           Exchanges, Queues 생성이 필요하면 Tech팀 요청

구분	IP	연결Port	Management Port	User/Pass
DEV	10.118.245.43	5672	8080	xlotte-sa / 1qazxsw2
            Management Site => http://10.118.245.43:8080

            가이드 => RabbitMQ 코딩가이드 (수정중)

     p) endpoint 정보 
              연결 문서 참조=> 01. 인프라 정보

3. 개발표준
     a) 코딩가이드
              i) Java

                 링크 = >5. 코딩 가이드(Coding Guide)[JAVA]

              ii) WebSquare

                  링크 = >4. 코딩 가이드(Coding Guide)[WebSquare]

              iii) Python

                  링크 = >6. 코딩 가이드(Coding Guide)[Python]



     b ) 개발 프로세스
               => 10. Development Process

     c) 서비스 명명
              서비스코드 명 및 서비스 약어는 아래 링크 문서에서 참조합니다.

7. 개발 서비스 코드 체계- 수정

     d) Package 설계


Controller 계층
              @Controller 어노테이션을 가집니다. REST API 요청과 서비스를 이어주는 역할을 합니다.  => 개발 가이드 : 10-5. Controller 개발(BO,FO)

 Service 계층
              @Service 어노테이션을 가집니다. 비즈니스 로직이 구현됩니다. 데이타베이스 연결 및 MQ 등의 자원들에 접근하기 위한 추상화 오브젝트를 다룹니다.=> 개발 가이드 : 10-4. Service 개발

 DAO
              ReadOnly DAO는 @Repository, @Mapper, @UseReadOnlyDatasource 를 가집니다. 쓰기를 허용할 경우 @Repository, @Mapper, @UseReadWriteDatasource 어노테이션을 가집니다.=> 개발 가이드 : 10-8. Data Access Object 개발

Model
              @Data 어노테이션을 사용합니다. @Getter, @Setter, @RequiredArgsConstructor, @ToString, @EqualsAndHashCode 등의 역할을 한번에 처리하게 됩니다.   => 개발 가이드 : 10-3. Model 개발(BO,FO,API)

     e) REST API
          i) 도메인 명 설계 (DEV 환경)

               Service (Client, Static, Local, Static Local)
               Domain : dev.xlotte.com, dev-static.xlotte.com, devl.xlotte.com, devl-static.xlotte.com
               CNAME(Cache ELB) : alb-dev-seoul-sol-proxy-ston01-129265916.ap-northeast-2.elb.amazonaws.com

               API (FO, Back-end for Front)
               Domain : dev-api-fo.xlotte.com, dev-api-bff.xlotte.com
               CNAME : internal-alb-dev-seoul-sol-fobff-apigw01-479558194.ap-northeast-2.elb.amazonaws.com

               API (FO Local, Back-end for Front Local)
               Domain : devl-api-fo.xlotte.com, devl-api-bff.xlotte.com
               CNAME : internal-alb-dev-seoul-sol-fobff-lapigw01-240773774.ap-northeast-2.elb.amazonaws.com

               API (Back-end for Biz)
               Domain : dev-api-bfb.xlotte.com
               CNAME : internal-alb-dev-seoul-sol-bobfb-apigw01-2146870342.ap-northeast-2.elb.amazonaws.com

               API (BFB Local)
               Domain : devl-api-bfb.xlotte.com
               CNAME : internal-alb-dev-seoul-sol-bobfb-lapigw01-1322131239.ap-northeast-2.elb.amazonaws.com

             ii) API URI 표준

              REST API 설계 기준

       f) 단위 테스트
               아래 내용에 대한 가이드가 여기에 연결되어 있습니다.

               스프링 부트 테스트 작성 가이드 
                  - Mock REST 서비스 테스트 가이드 
                  - Mocking 테스트

      g) 의존라이브러리
               프로젝트에서 사용하는 라이브러리는 Nexus Repository에 등록되고 POM 파일로 작성한 명세대로 의존 라이브러리(아티팩트)가 실행환경으로 받아내려져 로컬 레포지토리에서 적재됩니다. 프로젝트에서 사용하는 주요 아틱팩트에 대해 기술합니다.



com.fasterxml.jackson.core	jackson-databind	
2.9.0



com.fasterxml.jackson.core	jackson-core	


      h) 명명법 
                일반적인 명명에 대한 정책을 아래 링크의 문서에서 확인하실 수 있습니다. 

                01. Naming 정책

          - REST API URI 
                 컬렉션 이름은 복수 명사를 사용합니다.
                 도큐먼트 이름은 단수 명사를 사용합니다.
                 컨트롤러 리소스는 실행 가능한 함수처럼 파라미터(입력 값)와 반환 값(출력 값)이 있습니다.

                 컨트롤러명은 select/create/delete/update 대신 비즈니스와 연관된 용어를 사용한다. (get/register/remove/change 등)

                URI 의 기본 구조는 다음과 같습니다.

                Scheme://host/base path/path?query

                여기서 host는 도메인명이며 base path 는 버전도 포함한다.

                https://{도메인명} /{컨텍스트 경로=조직명,마이크로서비스명} /{version}/  은 하나의 마이크로서비스와 매핑되는 Main URL 이므로 Main URL의 변경은 곧 새로운 마이크로 서비스를 나타냅니다.



                {도메인명} /{컨텍스트 경로=조직명,마이크로서비스명} /{version}/ {api명}/{컨트롤러}

                아래의 claim, himart 등은 주문과 전시에서 업무 성격에 따라 세부 MSA 로 분리할 필요가 있을 경우 표기합니다.

                 => 이 부분은 API Gateway 서버인 Tyk에서 기술적 지원이 되는지 확인 중입니다. 지원이 되지 않을 경우 order-claim 등으로 context를 합쳐야 합니다.

ex)  https://devl-api-bff.xlotte.com/order/{claim}/v1/order/registerOrder?orderid=100
https://devl-api-bff.xlotte.com/display/{himart}/v1/main/getBanner?bannerid=10
https://devl-api-bff.xlotte.com/common/v1/auth/getAuthToken?tokend=10&...  ( 사용자 인증 토큰 생성  필수)
https://devl-api-bff.xlotte.com/open-common/v1/auth/getAuthToken?tokend=10&...  (사용자 인증 토큰 생성 불필요- context 앞에 prefix로 "open-" 표기)
                 i) REST API 개발 가이드 => 10-6. Rest API개발

                ii) REST API 설계 가이드 => REST API 설계 가이드

          - Codecommit
                  다음 위치 문서를 참고합니다.

                  15. CodeCommit 정책

                  MSA 프로젝트 리스트

          - S3 bucket
                 Amazon S3에 있는 모든 기존의 버킷 이름은 고유해야 합니다.
                 버킷 이름은 3자 이상, 63자 이하여야 합니다.
                 버킷 이름에 대문자나 밑줄을 사용할 수 없습니다.
                 버킷 이름은 소문자나 숫자로 시작해야 합니다.
                 버킷 이름은 한 개 이상으로 구성된 일련의 레이블이어야 합니다. 각 레이블은 마침표(.)로 구분합니다. 버킷 이름은 소문자, 숫자, 하이픈(-)을 포함할 수 있습니다.

                                    각 레이블은 소문자나 숫자로 시작하고 끝나야 합니다.

                  버킷 생성은 표준 명명법에 따라 버킷명을 작명한 뒤 JIRA를 통해 CA에게 생성요청합니다. 

                 09. S3 구성 정책   

           - 패키지명
    