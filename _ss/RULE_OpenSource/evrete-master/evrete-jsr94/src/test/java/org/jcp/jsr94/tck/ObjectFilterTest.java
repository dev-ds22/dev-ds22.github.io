/* * JAVA COMMUNITY PROCESS * * J S R  9 4 * * Test Compatibility Kit * */package org.jcp.jsr94.tck;import org.jcp.jsr94.tck.model.Customer;import org.jcp.jsr94.tck.model.Invoice;import org.jcp.jsr94.tck.util.TestObjectFilter;import org.junit.jupiter.api.Test;import javax.rules.ObjectFilter;/** * Test the javax.rules.ObjectFilter class. * <p> * <b>Performs the following tests:</b><br> * <ul> * <li>Basic API tests. {@link #testObjectFilter} * <ul> * <li>Instance Creation * <li>Filtering * </ul> * </ul> * * @version 1.0 * @see javax.rules.ObjectFilter * @since JSR-94 1.0 */class ObjectFilterTest {    /**     * Test the compliance for javax.rules.ObjectFilter.     * This test is testing the basic functionality of the     * TestObjectFilter. This object filter will be used in rule     * session related tests.     * This test creates two filters one filter is a Customer filter     * the other one an Invoice filter.     * Both Customer and Invoice objects will be passed to both filters     * and the results are checked.     *     * <p>     * <b>Description:</b><br>     * <ul>     * <li>Instance Creation     * <ul>     * <li>Fail: If the TestObjectFilter cannot be created and/or does     * not implement the ObjectFilter interface.     * <li>Succeed: If the TestObjectFilter can successfully be created.     * </ul>     * <li>Filtering     * <ul>     * <li>Fail: If objects are returned that are not part of the     * filter's pattern.     * <li>Succeed: If only objects that are part of the filter's     * pattern are being returned.     * </ul>     * </ul>     *     * @see org.jcp.jsr94.tck.util.TestObjectFilter     * @see org.jcp.jsr94.tck.model.Customer     * @see org.jcp.jsr94.tck.model.Invoice     */    @Test    void testObjectFilter() {        try {            ObjectFilter customerFilter = new TestObjectFilter(TestObjectFilter.CUSTOMER_FILTER);            ObjectFilter invoiceFilter = new TestObjectFilter(TestObjectFilter.INVOICE_FILTER);            Customer c = new Customer("test customer");            Invoice i = new Invoice("test invoice");            Object obj;            // We should get the customer back.            obj = customerFilter.filter(c);            assert obj != null;            assert obj instanceof Customer;            assert c.equals(obj);            // The invoice should be filtered out.            obj = customerFilter.filter(i);            assert obj == null;            // We should get the invoice back.            obj = invoiceFilter.filter(i);            assert obj != null;            assert obj instanceof Invoice;            assert i.equals(obj);            // The customer should be filtered out.            obj = invoiceFilter.filter(c);            assert obj == null;        } catch (Exception e) {            throw new IllegalStateException(e);        }    }}