/* * JAVA COMMUNITY PROCESS * * J S R  9 4 * * Test Compatibility Kit * */package org.jcp.jsr94.tck.admin;// java importsimport org.junit.jupiter.api.Test;import javax.rules.admin.RuleExecutionSetDeregistrationException;/** * Test the javax.rules.admin.RuleExecutionSetDeregistrationException * <p> * class. * * <p> * * <b>Performs the following tests:</b><br> * * <ul> * * <li>Basic API tests. {@link #testRuleExecutionSetUnregisterException} * * <ul> * * <li>Instance Creation * * <li>Class Hierarchy * * <li>Exception Wrapping * * </ul> * * </ul> * * @version 1.0 * @see javax.rules.admin.RuleExecutionSetDeregistrationException * @since JSR-94 1.0 */class RuleExecutionSetDeregistrationExceptionTest {    /**     * Test the compliance for javax.rules.admin.RuleExecutionSetDeregistrationException.     * <b>Description:</b><br>     * <p>     * Create two instances of the RuleExecutionSetDeregistrationException     * <p>     * class. The first     * <p>     * instance will be constructed with an additional message. The     * <p>     * second instance will have its own message as well as wrap the     * <p>     * first instance. The class hierarchy will be tested. The second     * <p>     * exception will be thrown. The exception will be caught and the     * <p>     * test will verify whether the exception can successfully be     * <p>     * unwrapped.     * <p>     * The following tests will be performed.     *     * <ul>     *     * <li>Instance Creation     *     * <ul>     *     * <li>Fail: If RuleExecutionSetDeregistrationException cannot be created by any of     * <p>     * the JSR specified constructor.     *     * <li>Succeed: If the exception can successfully be created.     *     * </ul>     *     * <li>Class Hierarchy     *     * <ul>     *     * <li>Fail: If superclass is not a RuleAdministrationException     *     * <li>Succeed: If the exception is instance of RuleAdministrationException.     *     * </ul>     *     * <li>Exception Wrapping     *     * <ul>     *     * <li>Fail: If any other than the the original     * <p>     * RuleExecutionSetDeregistrationException is unwrapped.     *     * <li>Succeed: If exception can successfully be unwrapped.     *     * </ul>     *     * </ul>     */    @Test    void testRuleExecutionSetUnregisterException() {        RuleExecutionSetDeregistrationException re1 = null;        RuleExecutionSetDeregistrationException re2 = null;        try {            re1 = new RuleExecutionSetDeregistrationException("jsr94-test-res-unregister-exception");            re2 = new RuleExecutionSetDeregistrationException("jsr94-test-embedded-res-unregister-exception", re1);            // Throw it.            throw re2;        } catch (RuleExecutionSetDeregistrationException ex) {            // Catch it.            Throwable t = ex.getCause();            assert t.equals(re1);            assert ex.equals(re2);        } catch (Exception e) {            throw new IllegalStateException();        }    }}