/* * JAVA COMMUNITY PROCESS * * J S R  9 4 * * Test Compatibility Kit * */package org.jcp.jsr94.tck.admin;import org.jcp.jsr94.tck.util.TestCaseUtil;import org.junit.jupiter.api.Test;import javax.rules.RuleServiceProvider;import javax.rules.admin.LocalRuleExecutionSetProvider;import javax.rules.admin.Rule;import javax.rules.admin.RuleAdministrator;import javax.rules.admin.RuleExecutionSet;import java.io.InputStream;import java.util.HashMap;import java.util.List;import java.util.Map;/** * Test the javax.rules.admin.Rule class. * <p> * <b>Performs the following tests:</b><br> * <ul> * <li>Basic API tests. {@link #testRule} * <ul> * <li>Create Instance * <li>Get / Set properties * </ul> * </ul> * * @version 1.0 * @see javax.rules.admin.Rule * @since JSR-94 1.0 */class RuleTest {    /**     * Test the compliance for javax.rules.admin.Rule.     * <p>     * A RuleExecutionSet for tck_res_1.xml will be created using the     * <p>     * LocalRuleExecutionSetProvider. The list of rules from this rule     * <p>     * execution set should at least contain 1 rule (as described in     * <p>     * the TCK documentation). Additional test for setting properties     * <p>     * on the rule will be performed.     * <p>     * <b>Description:</b><br>     * <ul>     * <li>Create Instance     * <ul>     * <li>Fail: If any error occurs or no rules can be found in the     * <p>     * tck_res_1.xml rule execution set.     * <li>Succeed: If rules can be retrieved from the rule execution     * <p>     * set and their name and description are set.     * </ul>     * <li>Get / Set properties     * <ul>     * <li>Fail: If the added properties can not be retrieved.     * <li>Succeed: If the properties added to this rule can     * <p>     * successfully be retrieved.     * </ul>     * </ul>     */    @Test    void testRule() {        try {            // Get the RuleServiceProvider            RuleServiceProvider serviceProvider = TestCaseUtil.getRuleServiceProvider("RuleExecutionSetTest");            assert serviceProvider != null;            // Get the RuleAdministrator            RuleAdministrator ruleAdministrator = serviceProvider.getRuleAdministrator();            assert ruleAdministrator != null;            // Test the LocalRuleExecutionSetProvider API            LocalRuleExecutionSetProvider localProvider = ruleAdministrator.getLocalRuleExecutionSetProvider(null);            assert localProvider != null;            InputStream inStream = TestCaseUtil.getRuleExecutionSetInputStream("src/test/resources/TckRes1.java");            // Create the RuleExecutionSet.            Map<String, String> config = new HashMap<>();            config.put("org.evrete.jsr94.dsl-name", "JAVA-SOURCE");            RuleExecutionSet res = localProvider.createRuleExecutionSet(inStream, config);            inStream.close();            // Get the rules.            List<?> ruleList = res.getRules();            assert ruleList != null;            assert 0 < ruleList.size();            Rule rule = (Rule) ruleList.iterator().next();            // Test the name and description            assert rule.getName() != null;            assert rule.getDescription() != null;            // Test the properties.            rule.setProperty("ruleProperty", ruleList);            Object obj = rule.getProperty("ruleProperty");            assert obj != null;            assert obj.equals(ruleList);        } catch (Exception e) {            throw new IllegalStateException(e);        }    }}