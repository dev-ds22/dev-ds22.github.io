/* * JAVA COMMUNITY PROCESS * * J S R  9 4 * * Test Compatibility Kit * */package org.jcp.jsr94.tck;import org.jcp.jsr94.tck.util.TestCaseUtil;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.Test;import javax.rules.ConfigurationException;import javax.rules.RuleServiceProviderManager;/** * Test the javax.rules.RuleServiceProviderManager class. * <p> * <b>Performs the following tests:</b><br> * <ul> * <li>Basic API tests. {@link #testRuleServiceProviderManager} * <ul> * <li>RuleServiceProvider Property specification * <li>Load the RuleServiceProvider class. * <li>Register the RuleServiceProvider class. * <li>Deregister the RuleServiceProvider class. * </ul> * </ul> * * @version 1.0 * @see javax.rules.RuleServiceProviderManager * @since JSR-94 1.0 */class RuleServiceProviderManagerTest {    /**     * Test the compliance for javax.rules.RuleServiceProviderManager.     *     * <p>     * <b>Description:</b><br>     * Test the basic functioning of the RuleServiceProviderManager.<br>     * The rule engine vendor specific rule service provider should be     * specified in the "tck.conf" configuration file.<br>     * The following tests will be performed:<br>     * <ul>     * <li>Property specification     * <ul>     * <li>Fail: If the "rule-service-provider" configuration setting     * has not been set.     * <li>Succeed: When the javax.rules.ruleServiceProvider is not     * null.     * </ul>     * <li>Load the RuleServiceProvider class.     * <ul>     * <li>Fail: If the specified class cannot be found.     * <li>Succeed: If the specified class can successfully be loaded.     * </ul>     * <li>Register the RuleServiceProvider class.     * <ul>     * <li>Fail: If an exception occurs during registration.     * <li>Succeed: If the specified provider can be successfully     * retrieved from the RuleServiceProviderManager.     * </ul>     * <li>Deregister the RuleServiceProvider class.     * <ul>     * <li>Fail: If the rule service provider can still be found.     * <li>Succeed: If the specified provider has been successfully     * removed from the RuleServiceProviderManager.     * </ul>     * </ul>     *     * @see TestCaseUtil#getRuleServiceProvider     */    @Test    void testRuleServiceProviderManager() {        // The rule engine vendor specific rule service provider should        // be specified in the tck.conf configuration file.        // Use the TestCaseUtil utility class to retrieve this setting.        String ruleServiceProvider = TestCaseUtil.getRuleServiceProvider();        // Fail this test if no provider has been specified.        assert ruleServiceProvider != null;        // Load the provider.        Class<?> ruleServiceProviderClass;        try {            ruleServiceProviderClass = Class.forName(ruleServiceProvider);        } catch (ClassNotFoundException e) {            throw new IllegalStateException(e);        }        try {            // Register the provider.            RuleServiceProviderManager.registerRuleServiceProvider("test", ruleServiceProviderClass);            // Retrieve the provider            Object object = RuleServiceProviderManager.getRuleServiceProvider("test");            assert ruleServiceProviderClass.equals(object.getClass());            // Deregister the provider.            RuleServiceProviderManager.deregisterRuleServiceProvider("test");            Assertions.assertThrows(ConfigurationException.class, () -> RuleServiceProviderManager.getRuleServiceProvider("test"));        } catch (ConfigurationException e) {            throw new IllegalStateException(e);        }    }}