/* * JAVA COMMUNITY PROCESS * * J S R  9 4 * * Test Compatibility Kit * */package org.jcp.jsr94.tck.admin;import org.junit.jupiter.api.Test;import javax.rules.admin.RuleExecutionSetRegisterException;/** * Test the javax.rules.admin.RuleExecutionSetRegisterException class. * <p> * <b>Performs the following tests:</b><br> * <ul> * <li>Basic API tests. {@link #testRuleExecutionSetRegisterException} * <ul> * <li>Instance Creation * <li>Class Hierarchy * <li>Exception Wrapping * </ul> * </ul> * * @version 1.0 * @see javax.rules.admin.RuleExecutionSetRegisterException * @since JSR-94 1.0 */class RuleExecutionSetRegisterExceptionTest {    /**     * Test the compliance for     * javax.rules.admin.RuleExecutionSetRegisterException.     *     * <p>     * <b>Description:</b><br>     * Create two instances of the RuleExecutionSetRegisterException     * class. The first     * instance will be constructed with an additional message. The     * second instance will have its own message as well as wrap the     * first instance. The class hierarchy will be tested. The second     * exception will be thrown. The exception will be caught and the     * test will verify whether the exception can successfully be     * unwrapped.     * The following tests will be performed.     * <ul>     * <li>Instance Creation     * <ul>     * <li>Fail: If RuleExecutionSetRegisterException cannot be created by any of     * the JSR specified constructor.     * <li>Succeed: If the exception can successfully be created.     * </ul>     * <li>Class Hierarchy     * <ul>     * <li>Fail: If superclass is not a RuleAdministrationException     * <li>Succeed: If the exception is instance of RuleAdministrationException.     * </ul>     * <li>Exception Wrapping     * <ul>     * <li>Fail: If any other than the the original     * RuleExecutionSetRegisterException is unwrapped.     * <li>Succeed: If exception can successfully be unwrapped.     * </ul>     * </ul>     */    @Test    void testRuleExecutionSetRegisterException() {        RuleExecutionSetRegisterException re1 = null;        RuleExecutionSetRegisterException re2 = null;        try {            re1 = new RuleExecutionSetRegisterException("jsr94-test-res-register-exception");            re2 = new RuleExecutionSetRegisterException("jsr94-test-embedded-res-register-exception", re1);            // Throw it.            throw re2;        } catch (RuleExecutionSetRegisterException ex) {            // Catch it.            Throwable t = ex.getCause();            // The cause of the exception should be re1.            assert t.equals(re1);            // The thrown exception should be re2.            assert ex.equals(re2);        } catch (Exception e) {            throw new IllegalStateException();        }    }}